//
// Created by Thomas Spycher on 02.08.22.
//

#include "defendermenu.h"
#include "pages/Temperature.h"
#include "pages/gpsPosition.h"
#include "pages/Compass.h"
#include "pages/version.h"
#include "sound.h"


const unsigned char big_logo [] PROGMEM = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x03, 0xff, 0xf0, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0x0f, 0xff, 0xc0, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0xff, 0x9f, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf9, 0xff, 0xf0, 0x00, 0x00,
        0x00, 0x00, 0x3f, 0xf8, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x1f, 0xfc, 0x00, 0x00,
        0x00, 0x00, 0xff, 0xe7, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe7, 0xff, 0x00, 0x00,
        0x00, 0x03, 0xff, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0xff, 0xc0, 0x00,
        0x00, 0x07, 0xfc, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x3f, 0xe0, 0x00,
        0x00, 0x1f, 0xf3, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xcf, 0xf8, 0x00,
        0x00, 0x3f, 0xef, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf7, 0xfc, 0x00,
        0x00, 0x7f, 0xbf, 0x01, 0xf8, 0x03, 0xf8, 0x3f, 0x8f, 0xbf, 0xe0, 0x00, 0x00, 0xfd, 0xfe, 0x00,
        0x00, 0xfe, 0x7c, 0x01, 0xf8, 0x03, 0xf8, 0x3f, 0x9f, 0xbf, 0xf8, 0x00, 0x00, 0x3e, 0x7f, 0x00,
        0x01, 0xfd, 0xf0, 0x01, 0xf8, 0x03, 0xf8, 0x3f, 0x9f, 0x3f, 0xfc, 0x00, 0x00, 0x0f, 0xbf, 0x80,
        0x03, 0xfb, 0xe0, 0x03, 0xf0, 0x07, 0xf8, 0x3f, 0x9f, 0x7f, 0xfc, 0x00, 0x00, 0x07, 0xdf, 0xc0,
        0x07, 0xf7, 0x80, 0x03, 0xf0, 0x0f, 0xf8, 0x3f, 0xbf, 0x7f, 0xfc, 0x00, 0x00, 0x01, 0xef, 0xe0,
        0x0f, 0xdf, 0x00, 0x03, 0xf0, 0x0f, 0xf8, 0x7f, 0xfe, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0xfb, 0xf0,
        0x1f, 0xbe, 0x00, 0x07, 0xe0, 0x1f, 0xf8, 0x7f, 0xfe, 0xfc, 0x7c, 0x7f, 0xf0, 0x00, 0x7d, 0xf8,
        0x1f, 0xb8, 0x00, 0x07, 0xe0, 0x1f, 0x78, 0xff, 0xfe, 0xf8, 0xfc, 0xff, 0xf0, 0x00, 0x1d, 0xf8,
        0x3f, 0x70, 0x00, 0x07, 0xc0, 0x3f, 0x78, 0xff, 0xfc, 0xf8, 0xf8, 0xff, 0xe0, 0x00, 0x0e, 0xfc,
        0x3e, 0xe0, 0x00, 0x0f, 0xc0, 0x7f, 0xfc, 0xfb, 0xfd, 0xf8, 0xf8, 0xff, 0xe0, 0x00, 0x07, 0x7c,
        0x7d, 0xe0, 0x00, 0x0f, 0xc0, 0x7f, 0xfd, 0xfb, 0xfd, 0xf1, 0xf8, 0x1f, 0xc0, 0x00, 0x07, 0xbe,
        0x7d, 0xc0, 0x00, 0x0f, 0x80, 0xff, 0xfd, 0xf3, 0xf9, 0xf3, 0xf0, 0xfe, 0x00, 0x00, 0x03, 0xbe,
        0xfb, 0x80, 0x00, 0x1f, 0xfe, 0xff, 0xfd, 0xf3, 0xfb, 0xff, 0xf3, 0xf0, 0x00, 0x00, 0x01, 0xdf,
        0xfb, 0x80, 0x00, 0x1f, 0xff, 0xf8, 0x7f, 0xf3, 0xfb, 0xff, 0xe3, 0x80, 0x00, 0x00, 0x01, 0xdf,
        0xfb, 0x00, 0x00, 0x1f, 0xff, 0xf0, 0x7f, 0xe1, 0xf3, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xdf,
        0xf7, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x7f, 0xe1, 0xf7, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0xef,
        0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef,
        0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef,
        0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f,
        0xf7, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x0f, 0xf9, 0xf8, 0x7f, 0xff, 0xef, 0xfe, 0x00, 0x00, 0xef,
        0xf7, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x3f, 0xfd, 0xf8, 0x7d, 0xff, 0xef, 0xff, 0x00, 0x00, 0xef,
        0xf7, 0x00, 0x00, 0x07, 0x9f, 0xff, 0x3f, 0xfe, 0xf8, 0xfd, 0xff, 0xdf, 0xff, 0x00, 0x00, 0xef,
        0xfb, 0x00, 0x00, 0x3f, 0x1f, 0xff, 0x7f, 0xfe, 0xf8, 0xf9, 0xff, 0xdf, 0xff, 0x00, 0x00, 0xdf,
        0xfb, 0x80, 0x01, 0xfc, 0x1f, 0x1f, 0x7e, 0x7e, 0xf9, 0xfb, 0xf0, 0x1f, 0x1f, 0x00, 0x01, 0xdf,
        0xfb, 0x80, 0x0f, 0xe0, 0x3f, 0x3f, 0xfc, 0x3e, 0xf9, 0xf3, 0xff, 0x3f, 0x3f, 0x00, 0x01, 0xdf,
        0x7d, 0xc0, 0x0f, 0xfe, 0x3f, 0xfe, 0xf8, 0x7e, 0xfb, 0xf3, 0xff, 0x3f, 0xfe, 0x00, 0x03, 0xbe,
        0x7d, 0xe0, 0x1f, 0xfe, 0x3f, 0xfe, 0xf8, 0x7e, 0xff, 0xe7, 0xff, 0x3f, 0xfe, 0x00, 0x07, 0xbe,
        0x3e, 0xe0, 0x1f, 0xfe, 0x7f, 0xfd, 0xf8, 0x7c, 0xff, 0xc7, 0xff, 0x7f, 0xfc, 0x00, 0x07, 0x7c,
        0x3f, 0x70, 0x1f, 0xfc, 0x7f, 0xfd, 0xf0, 0xfc, 0xff, 0xcf, 0xfe, 0x7f, 0xfc, 0x00, 0x0e, 0xfc,
        0x1f, 0xb8, 0x00, 0x00, 0x7d, 0xf1, 0xf1, 0xfc, 0xff, 0x8f, 0xc0, 0x7d, 0xf0, 0x00, 0x1d, 0xf8,
        0x1f, 0xbe, 0x00, 0x00, 0xfd, 0xf1, 0xff, 0xf8, 0xff, 0x8f, 0xfe, 0xfd, 0xf0, 0x00, 0x7d, 0xf8,
        0x0f, 0xdf, 0x00, 0x00, 0xfd, 0xf9, 0xff, 0xf8, 0xff, 0x1f, 0xfe, 0xfd, 0xf8, 0x00, 0xfb, 0xf0,
        0x07, 0xf7, 0x80, 0x00, 0xf8, 0xf8, 0xff, 0xf0, 0xff, 0x1f, 0xfe, 0xf8, 0xf8, 0x01, 0xef, 0xe0,
        0x03, 0xfb, 0xe0, 0x01, 0xf8, 0xf8, 0xff, 0xe0, 0xfe, 0x1f, 0xfd, 0xf8, 0xf8, 0x07, 0xdf, 0xc0,
        0x01, 0xfd, 0xf0, 0x01, 0xf0, 0xf8, 0x3f, 0x80, 0xfe, 0x1f, 0xfd, 0xf8, 0xf8, 0x0f, 0xbf, 0x80,
        0x00, 0xfe, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x7f, 0x00,
        0x00, 0x7f, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xfe, 0x00,
        0x00, 0x3f, 0xef, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf7, 0xfc, 0x00,
        0x00, 0x1f, 0xf3, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xcf, 0xf8, 0x00,
        0x00, 0x07, 0xfc, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x3f, 0xe0, 0x00,
        0x00, 0x03, 0xff, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0xff, 0xc0, 0x00,
        0x00, 0x00, 0xff, 0xe7, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe7, 0xff, 0x00, 0x00,
        0x00, 0x00, 0x3f, 0xf8, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x1f, 0xfc, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0xff, 0x9f, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf9, 0xff, 0xf0, 0x00, 0x00,
        0x00, 0x00, 0x03, 0xff, 0xf0, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0x0f, 0xff, 0xc0, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char small_logo [] PROGMEM = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1d, 0xdf, 0xc0, 0x00, 0x06, 0x3d, 0xdf, 0xc0, 0x00, 0x0e,
        0x3d, 0xfe, 0xde, 0x00, 0x0e, 0x7f, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0x7f, 0xb8, 0x00, 0x0f, 0xef,
        0x7f, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf7, 0xf7, 0xff, 0x80, 0x1d, 0xff, 0xff,
        0xff, 0x80, 0x7b, 0xfd, 0xfd, 0xff, 0x80, 0x7b, 0xff, 0xff, 0xff, 0x00, 0x07, 0xdf, 0xfb, 0xfe,
        0x00, 0x07, 0xff, 0x7b, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

DefenderMenu::DefenderMenu(Car& car, UnitConfig& unitConfig) : car(car), unitconfig(unitConfig), oled_ready(false), lcd_ready(false) {
    Serial.println("--> Starting up Menu");
    //lcd = new Waveshare_LCD1602_RGB(unitconfig.lcd_cols,unitconfig.lcd_rows);  //16 characters and 2 lines of show
    /*lcd->init();
    lcd->noCursor();
    lcd->setRGB(unitconfig.lcd_red, unitconfig.lcd_green, unitconfig.lcd_blue);
    lcd_ready = true;
     */

    //sound = new Sound(unitconfig.piezo_pin);
    //Serial.println("--> Sound Loaded");

    oled = new Adafruit_SSD1351(unitconfig.oled_screen_width, unitconfig.oled_screen_height, unitconfig.oled_cs_pin, unitconfig.oled_dc_pin, unitconfig.oled_mosi_pin, unitconfig.oled_sclk_pin, unitconfig.oled_rst_pin);
    Serial.println("--> OLED Configured");

    // init OLED
    oled->begin();
    oled->fillScreen(BLACK);
    oled_ready = true;
    Serial.println("--> OLED Initialized");

    page1 = new GpsPosition(car);
    Serial.println("----> GpsPosition Page Loaded");

    page2 = new Temperature(car);
    Serial.println("----> Temperature Page Loaded");

    page3 = new Version(car);
    Serial.println("----> Version Page Loaded");

    num_pages = 3;
    //Page *p[3] = {&page_gps, &page_temperature, &page_version};
    //pages[3] = *p;

    //(*pages)[3] = {&page_gps, &page_temperature, &page_version};
    /*
    pages[1] = new Compass();
    Serial.println("----> Compass Page Loaded");
    */

     //sizeof(&pages)/sizeof(pages[0]);
    Serial.println("--> Pages Configured");
}

void DefenderMenu::update_current_page_data() {
    get_page()->update_values();
}

void DefenderMenu::show_message(const char message[], const char message2[], int delay_ms) {
    if (oled_ready) {
        int margin_top = 40;
        int margin_left = 5;
        int line_margin = 2;
        // blackout background of the popup
        oled->fillRect(margin_left, margin_top, unitconfig.oled_screen_width-(2*margin_left), unitconfig.oled_screen_height-(2*margin_top), BLACK);
        // top
        oled->drawFastHLine(margin_left+line_margin,margin_top+line_margin, unitconfig.oled_screen_width-(2*margin_left)-(2*line_margin), RED);
        // bottom
        oled->drawFastHLine(margin_left+line_margin,unitconfig.oled_screen_height-margin_top-line_margin, unitconfig.oled_screen_width-(2*margin_left)-(2*line_margin)+1, RED);
        // left
        oled->drawFastVLine(margin_left+line_margin,margin_top+line_margin, unitconfig.oled_screen_height-(2*margin_top)-(2*line_margin), RED);
        // right
        oled->drawFastVLine(unitconfig.oled_screen_width-margin_left-line_margin,margin_top+line_margin, unitconfig.oled_screen_height-(2*margin_top)-(2*line_margin)+1, RED);

        oled->setTextColor(RED);
        oled->setTextSize(1);
        oled->setCursor(margin_left*3, unitconfig.oled_screen_height/2-3-7);
        oled->print(message);
        oled->setCursor(margin_left*3, unitconfig.oled_screen_height/2-3+7);
        oled->print(message2);
    }
    if (lcd_ready) {
        /*lcd->clear();
        lcd->blink();
        lcd->noCursor();
        lcd->setCursor(0, 0);
        display_animated_text(String("*** MESSAGE ****"), 0, 50);
        lcd->setCursor(0, 1);
        lcd->send_string(message);
        delay(delay_ms);
        update_lcd();*/
    }
}

void DefenderMenu::display_animated_text(String text, int row, int step_ms) {
    /*int bufsize = unitconfig.lcd_cols+1;
    char char_text[bufsize];
    text.toCharArray(char_text, bufsize);

    for (int i = 0; i < (int) strlen(char_text); ++i) {
        lcd->setCursor(i, row);
        lcd->write_char(char_text[i]);
        delay(step_ms);
    }*/
}

void DefenderMenu::welcome_screen(int delay_seconds) {
    Serial.println("--> Loading Welcome Screen");
    if(oled_ready) {
        oled->drawBitmap(0, 0, big_logo, unitconfig.oled_screen_width, unitconfig.oled_screen_height, GREEN);
        Serial.println("----> Logo drawn");
    }

    if (unitconfig.with_sound) {
        sound->play_welcome();
        Serial.println("----> Sound played");
    }

    delay(delay_seconds*1000);
    Serial.println("----> Welcome Screen finished");

    if(lcd_ready) {
        /*display_animated_text(String("  DEFENDER 110  "), 0, 30);
        display_animated_text(String("one life,live it"), 1, 40);
        lcd->clear();*/
    }
}

int DefenderMenu::type_of_current_page() {
    return get_page()->get_page_type();
}

void DefenderMenu::update_lcd_gauge() {
    /*lcd->setCursor(0, 0);

    String first_line = get_page()->lcd_first_line();
    lcd->send_string(first_line.c_str());
    if (first_line.length() < (unsigned int)unitconfig.lcd_cols) {
        for (int i = first_line.length(); i < unitconfig.lcd_cols; ++i) {
            lcd->write_char((char)32);
        }
    }

    lcd->setCursor(0, 1);
    int lcd_gauge_value = (int) (unitconfig.lcd_cols/ 100.0 * (float)get_page()->get_gauge_value());

    char filler = 255;
    char empty = 219;

    String gauge;

    for (int i = 0; i < unitconfig.lcd_cols; i++) {
        if(i<= lcd_gauge_value) {
            lcd->write_char(filler); //(char)32);
        } else {
            lcd->write_char(empty); //(char)32);
        }
    }*/
}

void DefenderMenu::draw_base_menu() {
    if(oled_ready) {
        Serial.print("-->Drawing new Menu Page for: ");
        Serial.println(get_page()->get_page_name());
        // header
        oled->fillScreen(BLACK);
        oled->setCursor(0, 3);
        oled->setTextColor(GREEN);
        oled->setTextSize(1);
        oled->print(get_page()->get_page_name());
        oled->drawLine(0, 15, 128, 15, GREEN);
        oled->drawBitmap(unitconfig.oled_screen_width - 34, 0, small_logo, 34, 15, GREEN);

        // footer
        int y = 128-7;
        oled->setCursor(29, y);
        //oled->print(gps->date.value());
        oled->print("Defender 110");
        oled->drawLine(0, y-3, 128, y-3, GREEN);
    }
}

void DefenderMenu::update_lcd() {
    get_page()->update_values();
    if(oled_ready) {
        get_page()->draw_on_oled_screen(*oled, unitconfig.oled_screen_width, unitconfig.oled_screen_height);
    }

    if (lcd_ready) {
        /*lcd->clear();
        lcd->setCursor(0, 0);
        lcd->send_string(get_page()->lcd_first_line().c_str());
        lcd->setCursor(0, 1);
        lcd->send_string(get_page()->lcd_second_line().c_str());
         */
    }
}

Page *DefenderMenu::get_page() {
    switch (current_page) {
        case 0:
            return page1;
        case 1:
            return page2;
        case 2:
            return page3;
        default:
            switch_page(0);
            return page1;
    }
    //eturn *pages[current_page];
}

int DefenderMenu::total_pages() {
    return num_pages;
}

int DefenderMenu::get_current_page() {
    return current_page;
}

void DefenderMenu::switch_page(int page) {
    Serial.println(current_page);
    current_page = page % total_pages();
    Serial.println(current_page);
    draw_base_menu();
}

void DefenderMenu::switch_page() {
    switch_page(current_page+1);
    if (unitconfig.with_sound)
        sound->play_page_switch();
}

bool DefenderMenu::is_in_switch_page_state() {
    return interrupt_switch_page;
}

void DefenderMenu::switch_page_by_interrupt() {
    interrupt_switch_page = true;
}

bool DefenderMenu::perform_interrupt_switch_page() {
    if (interrupt_switch_page) {
        interrupt_switch_page = false;
        switch_page();
        update_lcd();
        return true;
    }
    return false;
}